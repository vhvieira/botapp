###################################################################################################################
# THIS IS THE HELP CONTENT FILE.
# THE TEXT FRAGMENTS WILL BE DISPLAYED WHEN A '?'-Button HAS BEEN TRIGGERED.
# YOU MAY CHANGE, ADD, OR DELETE IF AND ONLY IF YOU WANT TO IMPROVE THIS HELP ;)
#
# THIS IS HOW YOU DO IT:
# IF A LINE STARTS WITH A ':' THE REST OF THE LINE IS A HELP KEY. AND THE FOLLOWING TEXT WILL BE ASSOCIATED
# WITH IT. TO LET THIS HELP TEXT GET DISPLAYED, GIVE YOUR BUTTON THE NAME OF THIS SPECIFIED KEY
# AND GIVE IT AN ACTIONLISTENER BY "HelpButton.addActionListener(HelpManager.getHelpButtonListener());"
# THAT'S IT.
###################################################################################################################
:SIMILARITY_MODE
<td align="left"><h1>Similarity Mode</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
You can switch between several similarity modes. Which means that there may be more than one function type for one slot type. Each one offers different ways of editing.<br>
</p>
<p>
There is also a built-in transformer which tries to convert the old similarity function into the new one when changing similarity mode.<br><br>
</p>
<p>
By the way: 
	you can easily add new function types if you want to use your own customized similarity measure. 
	To do so, you must extend the class <em>EditorSMFunction.java</em>, 
	implement all abstract methods as described and give it an entry in <em>SMFunctionFactory.java</em>.
</p>
</td>
</tr>
</table>	
</body>
</html>

:SYMMETRY
<td align="left"><h1>Symmetry Mode</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
In symmetry mode, every similarity between a case value <b>C</b> and a query value <b>Q</b> is equal to the similarity between <b>Q</b> as a case value and <b>C</b> as a query value.<br><br>

<b>Example:</b><br>
Let <b>Q</b> be a query value of <b>10</b>, and let <b>C</b> be a case value of <b>20</b>. Assume further <b>Sim(x, y)</b> is the similarity between x and y whereas x is always the query parameter and y is always the case parameter. In symmetric mode it is given that <b>sim(x,y) = sim(y,x)</b> for all x and y. In asymmetric mode sim(x,y) may differ from sim(y,x).<br><br>
<p></td>
</tr>
</table>
</body>
</html>

:INTEGER_STANDARD_STEP
<td align="left"><h1>Step Function</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
This function computes a similarity of 1.0 if the distance between the query and he case value is smaller than the distance defined in the respective input field. Else it returns a similarity of 0.0.<br><br>

The distance between case value and query value is calculated like this:<br>
    <b>distance := case_value - query_value</b><br><br>
	
This measure should be used if a case value is either absolutely usefull or absolutely unusable concerning a given query value.<br><br>

If you chose to use a symmetric function the behavior is the same no matter if a given distance value is positive or negative.<br><br>
In case you chose an asymmetric function you can define the similarity function for positive and for negative distances seperately.<br>
</p></td>
</tr>
</table>
</body>
</html>

:INTEGER_STANDARD_POLYNOMIAL
<td align="left"><h1>Polynomial Function</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
This measure uses a polynomial function to calculate the similarity between a given query value and a case value.<br><br>

To manipulate the gradient of the function you can change the parameter in the input field, but you can also use drag and drop.<br>

Note that a parameter > 1 will cause a very steep function which means that some given query and case values become very unsimilar eaven within 'small' distances.<br>
The value 1 causes a linear function which is an adequate similarity measure for the most numeric types.<br><br>

The distance between case value and query value is calculated like this:<br>
    <b>distance := case_value - query_value</b><br><br>

If you chose to use a symmetric function the behavior is the same no matter if a given distance value is positive or negative. <br><br>
In case you chose an asymmetric function you can define the similarity function for positive and for negative distances seperately.<br>
</p></td>
</tr>
</table>
</body>
</html>

:INTEGER_STANDARD_SMOOTH
<td align="left"><h1>Smooth Step Function</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
This is quite similar to the step function above. But there is a soft transition between the 1 similarity and the 0 similarity.<br><br>

The value in the input field defines the distance where the similarity should be 0.5.<br><br>

The distance between case value and query value is calculated like this:<br>
    <b>distance := case_value - query_value</b><br><br>

If you chose to use a symmetric function the behavior is the same no matter if a given distance value is positive or negative. <br><br>
In case you chose an asymmetric function you can define the similarity function for positive and for negative distances seperately.<br>
</p></td>
</tr>
</table>
</body>
</html>

:INTEGER_STANDARD_CONST
<td align="left"><h1>Constant Function</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
Here you can define a constant similarity function. Independent from the distance between a given query value and a case value the similarity is always the same.<br>
In most cases this function is used one needs a constant similarity of 1.0. But you can also change this value.<br><br>

The distance between case value and query value is calculated like this:<br>
    <b>distance := case_value - query_value</b><br><br>

If you chose to use a symmetric function the behavior is the same no matter if a given distance value is positive or negative. <br><br>
In case you chose an asymmetric function you can define the similarity function for positive and for negative distances seperately.<br>
</p></td>
</tr>
</table>
</body>
</html>

:INTEGER_ADVANCED_ASP
<td align="left"><h1>Additional Similarity Points</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
A similarity point is a distance value with a respective similarity value. With the optional similarity points the user can manipulate the similarity function by adding new points. The whole similarity function will be a linear interpolation over all similarity points (basic and optional).<br><br>

The distance between case value and query value is calculated like this:<br>
    <b>distance := case_value - query_value</b><br><br>
	
The range on the x-axis is defined by all possible distance values which is [min-max, max-min].<br><br>

Note that all similarity points will be mirrored in symmetry mode. So if you enter a new point, there pops up a second one on the other side.<br>
</p></td>
</tr>
</table>
</body>
</html>

:INTEGER_ADVANCED_BSP
<td align="left"><h1>Basic Similarity Points</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
A similarity point is a distance value with a respective similarity value. The basic similarity points are abolutely necessary for the definition of a similarity function, because they define the similarity for an exact match, and the similarities for the greatest possible distances.<br><br>

The distance between case value and query value is calculated like this:<br>
    <b>distance := case_value - query_value</b><br><br>
	
The range on the x-axis is defined by all possible distance values which is [min-max, max-min].<br><br>

Note that all similarity points will be mirrored in symmetry mode. So the max distance value will always be equal to the min distance value.<br>
</p></td>
</tr>
</table>
</body>
</html>

:SYMBOL_TAXONOMY_INNER_NODES
<td align="left"><h1>Inner Nodes as Values</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
In a taxonomy we can distinguish between inner nodes and leaves.<br>
The question is whether inner nodes are allowed as query / case values or not.<br>
If you chose to allow inner nodes as values you can further define the semantic of this.<br>
</p></td>
</tr>
</table>
</body>
</html>

:SYMBOL_TAXONOMY_INNER_SEMANTIC
<td align="left"><h1>Semantic of Inner Nodes</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
If inner nodes are allowed as case values respectively query values, there are two different possible meanings.<br>
The first semantic is a kind of generalization. A case with an inner node as value represents a generalization of all cases which have a leaf value of the belonging subtree. A query with an inner node as value may be interpreted as a kind of 'I dont care about the concrete value, but it should be one of this subtree'.<br>
The second semantic is the semantic of uncertainty. In this case we don't know the exact leaf value, but we do know that we're looking for one certain.<br>
</p></td>
</tr>
</table>
</body>
</html>

:SYMBOL_TAXONOMY_UNCERTAIN
<td align="left"><h1>Semantic of Uncertainty</h1></td></tr>
<tr>
<td colspan="2" background="<LINE>" ></td>
</tr>
<tr>
<td colspan="2">
<p>
If the inner node semantic is 'uncertain' we can distinguish between three different possible methods to compute the similarity between two taxonomy symbols.<br><br>

The pessimistic approach assumes that the leaf node which causes the minimal possible similarity is the one we're looking for.<br>
The optimistic  approach assumes that the leaf node which causes the maximal possible similarity is the one we're looking for.<br>
The average approach computes the average of all possible similarities.<br>
</p></td>
</tr>
</table>
</body>
</html>
